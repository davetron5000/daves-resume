= Dave's Resume

This is a set of small tools that allow you to manage your resume as a "database" of sorts, and publish it in various formats.  You can use it to maintain multiple resumes based on the same employment history and education, which can be handy for targeting certain jobs.

= Quick Start

    dr-scaffold -r my_resume_dir
    dr-format -r my_resume_dir -f HTML

<tt>resume.html</tt> now contains the resume generated by the scaffold.  To create you resume, you need to:

1. Modify <tt>resume.yaml</tt> with your information
2. Modify <tt>skills.yaml</tt> with your skillset (see below)
3. Duplicate <tt>experience_Initech.yaml</tt> for each job you've held; this contains all the positions you held at that job, plus other information
4. Duplicate <tt>education_Degree_Mill_U.yaml</tt> for each degree/education you wish to appear
5. Duplicate (or delete) <tt>samples_Name_of_this_work_sample.yaml</tt> with any work samples

You can generate in one of three formats:
<tt>RTF</tt>:: - Rich Text which can be read by Word
<tt>HTML</tt>:: - A basic HTML version
<tt>Markdown</tt>:: - a Markdown[http://www.daringfireball.com/projects/markdown] version


= YAML format

Basically, this is the serialized form of the classes in <tt>resume.rb</tt>, as produced by the standard YAML serializer that comes with Ruby.

So, if you edit this and get the formatting wrong, you get obtuse errors.  Be gentle and thank yourself you don't have to do it in Word.  Also consider using source control.  Now that you've decided to store your resume in a sane, text-based format, you get all the benefits of version control, including diffs and reverting to known versions.

Basically, the resume is:

Core:: (in <tt>resume.yaml</tt>) - This has stuff like your name, address, summary, etc.  If you wish to have multiple resumes, you will duplicate this file naming it <tt>resume_NAME.yaml</tt> where _NAME_ is the "core name" you can specify on the command-linen to <tt>dr-format</tt>
Skill Set:: (in <tt>skills.yaml</tt>) - This is a database of your skills, with an experience level and a number of years experience.    These determine the sort order in your resume output.  Basically, skills with which you are an <tt>:expert</tt> are shown first, sorted by years of experience. This is followed by skills where you are <tt>:intermediate</tt>.  <tt>:novice</tt> skills show up in their own category called "Some Experience With".  This allows you to include skills you've used, but be clear where your strengths lie.
            * The accepted levels currently are:
              <tt>:novice</tt>:: skills show up in "Some Experience With"
              <tt>:intermediate</tt>:: skills show up last in their category
              <tt>:expert</tt>:: skills show up first in their category
            * The categories are currently hard-coded (sorry) and any skill not in a category won't show up (this is on my todo list).  The categories are:
              <tt>:languages</tt>:: Programming languages, e.g.
              <tt>:apis</tt>:: APIs, standards, etc.
              <tt>:tools</tt>:: Specific technology tools
              <tt>:databases</tt>:: Relational databases
              <tt>:operating_systems</tt>:: Specific operating systems
Experience:: any file that starts with <tt>experience_</tt> and ends in <tt>.yaml</tt> will get picked up.  Things will be sorted properly (in reverse chronological order) for you.  A Job consists of one or more positions, and the formatter should be smart about handling jobs with only one position.
             * Acheivements can be tagged and you can use these tags to control your output (see below)
Education:: works like Experience files starting with <tt>education_</tt> will get picked up and sorted reverse chronologically
Samples:: this is just a name and a link, and only shows up in the Markdown and HTML version (though you are free to modify the RTF version).
References:: this isn't used anywhere right now, but any file starting with <tt>reference_</tt>  and ending with <tt>.yaml</tt> will get picked up.

= Tweaking the output

The output is created via ERB templates.  Currently, these templates are part of the gem installation and not terribly tweakable.  In the future you should be able to create your own.  If you are feeling up for it, you can tweak those in the gem install directly.

= Maintaining multiple resumes

The idea of Dave's Resume is that your resume database keeps *all* relevant data about your work experience.  The realities of the job market are that you need to focus your resume for a particular job.  As such, you might not want to include everything in your past on your resume.  For example, suppose you had a job with these three key achievements:

* Designed and Developed Enterprise Java Application for issue management
* Patched Windows machines for HR staff
* Conducted regular design and code reviews

If you were going for a Senior Java Developer position, you might not want to include the achievement regarding patching Windows machines (conversely if you were going for a network administrator position, maybe you would).

Filter allows you to customize this behavior.

You have two means of doing this:

* Create multiple "resume cores" with different headlines and summaries.  Here, just create, say <tt>resume_javadev.yaml</tt> and <tt>resume_networkadmin.yaml</tt> instead of the <tt>resume.yaml</tt> the scaffolding created.  Modify these as needed and then do <tt>dr-format -r resume_dir -f RTF --core javadev</tt> to generate your Java Developer focused resume
* Create filtering code in Ruby to filter your "achievements".  Here you create a class that implements <tt>filter_acheivements</tt>.  It takes an array of strings (where tags are available via <tt>String=tags</tt>) and should return an array of strings, filtered based on your criteria (presumably the tags in your database).  Create an instance of this class in your file and assign it to the <tt>FILTER</tt> constant.  Pass the path to this file to the <tt>--filter</tt> argument of <tt>dr-format</tt>.  

There is a default filter available that might do what you need

== Included Acheivement Filter

The included filter works as follows:

1. Create a core for the job (e.g. <tt>techlead_resume.yaml</tt>)
1. Create a config file in your resume dir named <tt>config_techlead.yaml</tt> (e.g.) that looks like so:
    --- !ruby/object:Resume::ResumeConfig 
    achievement_tags: 
    - :lead
    - :pm
    - :developer
    alt_tag: :architect
    core_name: developer
    include_untagged_achievements: true
    max_achievements: 5
    min_achievements: 3
    primary_tag: :developer
3. Modify the contents to your liking based upon how you've created your database and taking into account the algorithm.

The algorithm works like this:

1. The achievements for a position are filtered first based upon <tt>achievement_tags</tt>.  Anything not tagged with one of those tags is omitted.  Untagged acheivements are included if you set <tt>include_untagged_achievements</tt> to true, otherwise they are not included
2. Anything tagged <tt>:major</tt> is included regardless of the above algorithm
3. If no achievement was tagged with the tag specified in <tt>primary_tag</tt>, all achievements tagged with the tag specified in <tt>alt_tag</tt> are included.
4. If the number of achievements is below <tt>min_achievements</tt>, random achievements are added to make the list the minimum size
5. If the number of achievements is above <tt>max_achievements</tt>, any achievement tagged <tt>:minor</tt> is removed

So, the way to take advantage of this is:

* Tag <tt>:major</tt> on anything you always want to appear; your proudest moments
* Tag <tt>:minor</tt> anything you don't care about but might need to fill out your resume
* Tag every achievement with fine-grained tags relevant to the positions you are pursuing

To use this filter, specify <tt>--filter position_filter --core techlead</tt> (or whatever you named your core and filter config file).

= TODO

* don't hardcode the skill categories
* make scaffolding more fine-grained
* Allow for user-generated templates
