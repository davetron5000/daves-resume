# Dave's Resume

OK, so at the top of this is my actual resume, generated by some YAML files and the code here.  It's not the prettiest OO design in the world, but I needed to get my resume done quickly.

# How you can use this

0. Make sure you have <tt>ERB</tt> installed
1. Get this code from git
2. <tt>bin/scaffold</tt> - this will create a directory called <tt>scaffold/</tt> off this project's root.  This contains the YAML files for your resume.  You can provide a command line argument to use a different directory (it **will** blow this away, so be careful).
3. Edit those files (see below for more info)
4. <tt>bin/format</tt> *format* *yaml_location* *base_name* where
  * *format* is one of "RTF", "Markdown", or "HTML" 
  * *yaml_location* is the path to your Resume YAML
  * *base_name* is the name you want to use, without extension, e.g. "JohnSmiths_Resume"

You now have your resume in the given format

# YAML format

Basically, this is the serialized form of the classes in <tt>resume.rb</tt>, as produced by the standard YAML serializer that comes with Ruby.

So, if you edit this and get the formatting wrong, you get obtuse errors.  So, be gentle and thank yourself you don't have to do it in Word.

Basically, the resume is:

* Core (in <tt>resume.yaml</tt>) - This has stuff like your name, address, summary, etc.
* SkillSet (in <tt>skills.yaml</tt>) - This is a database of your skills, with an experience level and a # of years experience.  
    * The accepted levels currently are:
        * :novice - skills show up in "Exposure To"
        * :intermediate - skills show up last in their category
        * :expert - skills show up first in their category
    * The categories are currently hard-coded (sorry) and any skill not in a category won't show up.  The categories are:
        * :languages
        * :apis
        * :tools
        * :databases
        * :operating_systems
* Experience - any file that starts with <tt>experience_</tt> and ends in <tt>.yaml</tt> will get picked up.  The formatter will sort things in reverse chronological order for you.  A Job consists of one or more positions, and the formatter should be smart about handling jobs with only one position.
  * Acheivements can be tagged and you can use these tags to control your output (theoretically)
  * <tt>conf/conf.rb</tt> has an example; you create a <tt>Proc</tt> that receives the list of achievements for a particular job. This proc must evaulate to the list you want to be rendered.  <tt>ext/string_tags.rb</tt> adds a <tt>tags</tt> method to the String class, so you can access the tags of your key achievements and do whatever filtering you want (or none).
* Education - works like Experience files starting with <tt>education</tt> will get picked up and sorted reverse chronologically
* Samples - this is just a name and a link, and only shows up in the Markdown version.
* References - this isn't used anywhere right now, but any file starting with <tt>reference_</tt>  and ending with <tt>.yaml</tt> will get picked up.

# Tweaking the output

The output is done using ERB templates, so you can edit the files in <tt>templates/</tt> to change how things work.  I wouldn't recommend messing with the RTF unless you know what you are doing.  You can also create new formats if you like.  Just be sure to name the template with a +.erb+ extension.  Supposed you wanted to create a LaTeX version.  Create <tt>templates/TEX.erb</tt> with whatever you need in it (see the other templates for examples), and then <tt>format TEX *yaml_location* resume</tt> and <tt>resume.tex</tt> will be generated.

# Maintaining two Resumes

Perhaps you want to slightly tweak your resume depending on the position you are going for.  In my resume, I have two "resume cores", which are described in files named <tt>resume_*.yaml</tt>.  These allow you to change the headline and summary.  When you invoke <tt>format</tt>, an optional fourth argument is the name of the core you would like to use (you must specify this if you have more than one).

You can combine this with the achievement tagging and filtering (TBD) to control what shows up on your various resumes

# TODO

* Better conditional generation for headline and summary
* GEM packaging
* don't hardcode the skill categories
* Restore the achievement filtering stuff
