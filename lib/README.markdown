# Dave's Resume

OK, so at the top of this is my actual resume, generated by some YAML files and the code here.  It's not the prettiest OO design in the world, but I needed to get my resume done quickly.

# How you can use this

1. Install the rtf gem via <tt>gem install rtf</tt>
2. Get this code from git
3. <tt>rake scaffold</tt> - this will create a directory called <tt>scaffold/</tt> off this project's root.  This contains the YAML files for your resume.
4. Edit those files (see below for more info)
5. Modify <tt>conf/conf.rb</tt> to your tastes.  You should at least change the value of "RESUME_YAML" to point to where your YAML is
6. <tt>rake</tt>

You now have <tt>resume.markdown</tt> and <tt>resume.doc</tt> in the project's root.

# YAML format

Basically, this is the serialized form of the classes in <tt>resume.rb</tt>, as produced by the standard YAML serializer that comes with Ruby.

So, if you edit this and get the formatting wrong, you get obtuse errors.  So, be gentle and thank yourself you don't have to do it in Word.

Basically, the resume is:

* Core (in <tt>resume.yaml</tt>) - This has stuff like your name, address, summary, etc.
* SkillSet (in <tt>skills.yaml</tt>) - This is a database of your skills, with an experience level and a # of years experience.  
    * The acceted levels currently are:
        * :novice - skills show up in "Exposure To"
        * :intermediate - skills show up last in their category
        * :expert - skills show up first in their category
    * The categories are currently hard-coded (sorry) and any skill not in a category won't show up.  The categories are:
        * :languages
        * :apis
        * :tools
        * :databases
        * :operating_systems
* Experience - any file that starts with <tt>experience_</tt> and ends in <tt>.yaml</tt> will get picked up.  The formatter will sort things in reverse chronological order for you.  A Job consists of one or more positions, and the formatter should be smart about handling jobs with only one position.
  * Acheivements can be tagged and you can use these tags to control your output
  * <tt>conf/conf.rb</tt> has an example; you create a <tt>Proc</tt> that receives the list of achievements for a particular job. This proc must evaulate to the list you want to be rendered.  <tt>ext/string_tags.rb</tt> adds a <tt>tags</tt> method to the String class, so you can access the tags of your key achievements and do whatever filtering you want (or none).
* Education - works like Experience files starting with <tt>education</tt> will get picked up and sorted reverse chronologically
* Samples - this is just a name and a link, and only shows up in the Markdown version.
* References - this isn't used anywhere right now, but any file starting with <tt>reference_</tt>  and ending with <tt>.yaml</tt> will get picked up.

# So why is this so cruddy and hard-coded?

'Cause I did it in like 6 hours so I could have a way to more easily manage my resume.  I hate Word, and there really wasn't a great way to translate between LaTeX and Word that worked for me.  Plus, I thought it would be cool to host my resume on GitHub.

# TODO

* Don't hard-code the categories
* Possibly a section for awards/certifications
* Maybe some test cases?

