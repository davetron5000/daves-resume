#!/usr/bin/ruby -I lib -I ext -I conf

require 'rubygems'
require 'commandline'
require 'resume'
require 'serializer'
require 'formatter'
require 'fileutils'

include Resume

class DavesResume < CommandLine::Application
    def initialize
        author "David Copeland"
        synopsis "Usage: #{$0} --format file_format [file_format]* --resume resume_yaml_dir [--core core_name] [--name base_name]"
        short_description "Resume builder and formatter"
        long_description "This reads your resume in YAML and outputs it in a given file format (e.g. RTF).  This also allows you to specify multiple resume cores and to choose between them.  For example, if you are searching for a senior developer and a technical lead position, you might want to change your headline and summary, depending on the position. Further, you may want to customize which achievements of your post positions you focus on."

        options :help
        option :names => %w(--format -f), 
            :opt_description => "Formats to generate for your resume",
            :arg_description => "One or more format names matching existing templates",
            :arity => [1,-1],
            :opt_found   => get_args,
            :opt_not_found => lambda {
                puts synopsis
                exit 
            }
        option :names => %w(--resume -r), 
            :opt_description => "Sets the path to the resume YAML files",
            :arity => [1,1],
            :opt_found   => get_args,
            :opt_not_found => lambda {
                puts synopsis
                exit 
            }
        option :names => %w(--filter), 
            :opt_description => "Path to a ruby file that implements the 'Key Achievements' filter",
            :arity => [1,1],
            :opt_found   => get_args,
            :opt_not_found => false

        option :names => %w(--core -c), 
            :opt_description => "Sets the core for this resume generation",
            :arg_description => "Name of the core to use (should be in resume_dir named resume_CORENAME.yaml)",
            :arity => [1,1],
            :opt_found   => get_args,
            :opt_not_found => false

        option :names => %w(--name -n), 
            :opt_description => "Controls the name of the generated file",
            :arg_description => "Base name of the file(s) to generate (extension is based on formats selected)",
            :arity => [1,1],
            :opt_found   => get_args,
            :opt_not_found => 'resume'
    end

    def main
        serializer = Serializer.new
        serializer.core_to_use = opt.core if opt.core
        serializer.filter_file = opt.filter if opt.filter
        formatter = Formatter.new(serializer.load(opt.resume),opt.name)
        formatter.send(opt.format.to_sym)
    end
end
